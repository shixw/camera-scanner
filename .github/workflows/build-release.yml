name: Build and Release PC Client

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '1.0.0'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            artifact_name: camera-scanner-win
            file_extension: .exe
          - os: macos-latest
            platform: mac
            artifact_name: camera-scanner-mac
            file_extension: .dmg

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: pc-client/package-lock.json

      - name: Install dependencies
        run: |
          cd pc-client
          npm ci

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd pc-client
          npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd pc-client
          npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            pc-client/dist/*.exe
            pc-client/dist/*.msi

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            pc-client/dist/*.dmg
            pc-client/dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: camera-scanner-win
          path: ./artifacts/windows/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: camera-scanner-mac
          path: ./artifacts/macos/

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Camera Scanner ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## Camera Scanner ${{ steps.get_version.outputs.version }}
            
            ### 新功能
            - 手机摄像头扫描仪PC端应用
            - 支持Windows和macOS平台
            
            ### 下载
            - **Windows**: 下载 `.exe` 或 `.msi` 文件
            - **macOS**: 下载 `.dmg` 文件
            
            ### 安装说明
            1. 下载对应平台的安装文件
            2. 运行安装程序
            3. 启动应用程序开始使用

      - name: Upload Windows Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/camera-scanner Setup ${{ steps.get_version.outputs.version }}.exe
          asset_name: camera-scanner-${{ steps.get_version.outputs.version }}-win-setup.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/camera-scanner ${{ steps.get_version.outputs.version }}.msi
          asset_name: camera-scanner-${{ steps.get_version.outputs.version }}-win.msi
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos/camera-scanner-${{ steps.get_version.outputs.version }}.dmg
          asset_name: camera-scanner-${{ steps.get_version.outputs.version }}-mac.dmg
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload macOS ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos/camera-scanner-${{ steps.get_version.outputs.version }}-mac.zip
          asset_name: camera-scanner-${{ steps.get_version.outputs.version }}-mac.zip
          asset_content_type: application/zip
        continue-on-error: true